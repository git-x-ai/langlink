---
description: Rust best practices for Solana smart contract development using Anchor framework and Solana SDK - Enhanced with advanced patterns, enterprise practices, and production-ready strategies
globs: programs/**/*.rs, src/**/*.rs, tests/**/*.ts, **/*.rs, Cargo.toml, Anchor.toml
---

# Rust + Solana (Anchor) Advanced Best Practices

## Advanced Program Structure & Architecture
- Structure Solana programs using `Anchor` framework standards with comprehensive organization
- Place program entrypoint logic in `lib.rs`, not `main.rs` with proper module organization
- Organize handlers into modules (e.g., `initialize`, `update`, `close`) with proper separation
- Separate state definitions, errors, instructions, and utils with proper organization
- Group reusable logic under a `utils` module (e.g., account validation) with proper abstraction
- Use `declare_id!()` to define program ID with proper configuration
- Implement proper error handling hierarchies with comprehensive error types
- Use proper logging and monitoring with comprehensive analytics
- Implement proper testing strategies with comprehensive coverage
- Use proper documentation and knowledge sharing

## Advanced Anchor Framework Patterns
- Use `#[derive(Accounts)]` for all instruction contexts with comprehensive validation
- Validate accounts strictly using constraint macros (e.g., `#[account(mut)]`, `seeds`, `bump]`)
- Define all state structs with `#[account]` and `#[derive(AnchorSerialize, AnchorDeserialize)]`
- Prefer `Init`, `Close`, `Realloc`, `Mut`, and constraint macros to avoid manual deserialization
- Use `ctx.accounts` to access validated context accounts with proper error handling
- Handle CPI (Cross-Program Invocation) calls via Anchor's CPI helpers with proper validation
- Implement proper account validation with comprehensive security checks
- Use proper constraint validation with comprehensive error handling
- Implement proper account management with comprehensive lifecycle handling
- Use proper account optimization with comprehensive performance monitoring

## Advanced Serialization & Data Management
- Use **Borsh** or Anchor's custom serializer (not Serde) for on-chain data with proper optimization
- Always include `#[account(zero_copy)]` or `#[repr(C)]` for packed structures
- Avoid floating point types — use `u64`, `u128`, or fixed-point math with proper precision
- Zero out or close unused accounts to reduce rent costs with proper cleanup
- Implement proper data validation with comprehensive error handling
- Use proper data transformation with comprehensive optimization
- Implement proper data persistence with comprehensive security
- Use proper data monitoring with comprehensive analytics
- Implement proper data backup and recovery strategies
- Use proper data versioning and migration strategies

## Advanced Testing & Quality Assurance
- Write tests in TypeScript using Anchor's Mocha + Chai setup (`tests/*.ts`) with comprehensive coverage
- Use `anchor.workspace.MyProgram` to load deployed contracts with proper configuration
- Use `provider.simulate()` to inspect failed txs with comprehensive debugging
- Spin up a local validator (`anchor test`) and reset between tests with proper isolation
- Airdrop SOL to wallets with `provider.connection.requestAirdrop(...)` with proper management
- Validate program logs using `tx.confirmation.logMessages` with comprehensive analysis
- Implement proper test data management with comprehensive fixtures
- Use proper test environment management with comprehensive configuration
- Implement proper test automation and CI/CD integration
- Use proper performance testing and benchmarking

## Advanced Solana SDK (Manual) Patterns
- Use `solana_program` crate when not using Anchor (bare-metal programs) with proper optimization
- Carefully deserialize accounts using `AccountInfo`, `try_from_slice_unchecked` with proper validation
- Use `solana_program::msg!` for lightweight debugging logs with proper formatting
- Verify accounts via `is_signer`, `is_writable`, `key == expected` with comprehensive checks
- Never panic! Use `ProgramError::Custom(u32)` or `ErrorCode` enums with proper error handling
- Implement proper account validation with comprehensive security checks
- Use proper memory management with comprehensive optimization
- Implement proper error handling with comprehensive recovery strategies
- Use proper performance optimization with comprehensive monitoring
- Implement proper security patterns with comprehensive protection

## Advanced Security Patterns & Best Practices
- Always validate `msg.sender`/signer with `account_info.is_signer` with comprehensive checks
- Prevent replay attacks via `seeds`, `bump`, and unique PDAs with proper implementation
- Use strict size checks before reallocating or deserializing with comprehensive validation
- Avoid unsafe unchecked casting; prefer Anchor deserialization with proper safety
- For CPIs, validate `target_program` against expected program ID with comprehensive verification
- When using randomness, never rely on timestamps — use oracles or off-chain VRFs
- Implement proper input validation with comprehensive sanitization
- Use proper authentication and authorization with comprehensive security
- Implement proper access control with comprehensive permissions
- Use proper security monitoring and alerting with comprehensive protection

## Advanced Performance & Optimization
- Prefer zero-copy deserialization when accounts are large with proper optimization
- Minimize compute usage; avoid loops and recursion with proper algorithms
- Avoid memory reallocations mid-instruction with proper memory management
- Use `#[account(zero_copy)]` and `#[repr(packed)]` for tight layout with proper optimization
- Profile compute units with `solana logs` and `anchor run` with comprehensive monitoring
- Implement proper caching strategies with proper invalidation
- Use proper lazy loading with comprehensive optimization
- Implement proper batch processing with comprehensive error handling
- Use proper performance testing and benchmarking
- Implement proper performance monitoring and alerting

## Advanced Development Workflow & DevOps
- Use `anchor init` to scaffold projects with proper configuration
- Add Anchor IDL support for front-end usage (JSON ABI) with comprehensive documentation
- Use `anchor build`, `anchor deploy`, `anchor test` consistently with proper automation
- Use separate `Anchor.toml` environments for devnet/mainnet/localnet with proper configuration
- Format all Rust code with `cargo fmt`, lint with `cargo clippy` with proper quality gates
- Keep `Cargo.lock` checked into `programs/` but not root with proper version control
- Implement proper CI/CD pipelines with comprehensive testing
- Use proper environment management and configuration
- Implement proper monitoring and alerting
- Use proper backup and disaster recovery strategies

## Advanced Documentation & Knowledge Management
- Use `///` Rust doc comments for all instructions and accounts with comprehensive examples
- Include doc examples for each instruction with proper usage patterns
- Document PDA derivation logic and bump seed expectations with comprehensive details
- Maintain up-to-date `README.md` with test commands and deployment steps
- Implement proper API documentation with comprehensive examples
- Use proper code documentation standards with comprehensive coverage
- Implement proper knowledge sharing and team collaboration
- Use proper documentation automation and maintenance
- Implement proper documentation testing and validation
- Use proper documentation accessibility and usability

## Advanced Wallet & Network Handling
- Use `anchorProvider.wallet.publicKey` for signer verification in tests with proper validation
- Do not hardcode keypairs — use env-based loading (`process.env.ANCHOR_WALLET`) with proper security
- Deploy with clear `cluster` targets (`localnet`, `devnet`, `mainnet`) with proper configuration
- Use `anchor keys sync` to propagate program ID changes with proper synchronization
- Commit `target/idl/` and `target/types/` to share with front end with proper version control
- Implement proper wallet management with comprehensive security
- Use proper network configuration with comprehensive monitoring
- Implement proper transaction handling with comprehensive error management
- Use proper fee management with comprehensive optimization
- Implement proper network monitoring and alerting

## Advanced CI/CD & Deployment
- Use GitHub Actions with `solana-cli`, `anchor-cli`, and `node` installed with proper configuration
- Run `anchor test` in CI for every PR with comprehensive testing
- Use `solana program deploy` with explicit `--program-id` on production deploys with proper security
- Upload IDLs to a central registry (e.g., GitHub, IPFS, or `anchor.cloud`) with proper management
- Implement proper deployment automation with comprehensive monitoring
- Use proper environment management and configuration
- Implement proper rollback procedures with comprehensive testing
- Use proper security scanning and compliance monitoring
- Implement proper performance monitoring and alerting
- Use proper backup and disaster recovery strategies
